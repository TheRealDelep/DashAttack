//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Game/Managers/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace DashAttack.Externals.InputSystem{
    
    public partial class @InputActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputActions()
        {
            asset = InputActionAsset.FromJson(@"{
        ""name"": ""InputActions"",
        ""maps"": [
            {
                ""name"": ""Default"",
                ""id"": ""b3faade2-6b72-4ac3-b9e6-80b33c9d2fdc"",
                ""actions"": [
                    {
                        ""name"": ""Move"",
                        ""type"": ""PassThrough"",
                        ""id"": ""a368592f-3a8a-4753-a4bd-d897a3f60745"",
                        ""expectedControlType"": ""Axis"",
                        ""processors"": """",
                        ""interactions"": """",
                        ""initialStateCheck"": true
                    },
                    {
                        ""name"": ""Jump"",
                        ""type"": ""Button"",
                        ""id"": ""5c3177c5-03b6-4fb3-914f-b5e00a72c2ae"",
                        ""expectedControlType"": ""Button"",
                        ""processors"": """",
                        ""interactions"": """",
                        ""initialStateCheck"": true
                    }
                ],
                ""bindings"": [
                    {
                        ""name"": """",
                        ""id"": ""101df0df-abf8-4ff3-94e2-32a5e6f8c766"",
                        ""path"": ""<Gamepad>/dpad/x"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": """",
                        ""action"": ""Move"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": false
                    },
                    {
                        ""name"": """",
                        ""id"": ""36f08c4b-5072-4483-8643-4e3c3e8c6489"",
                        ""path"": ""<Gamepad>/leftStick/x"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": """",
                        ""action"": ""Move"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": false
                    },
                    {
                        ""name"": ""Keyboard Left/Right"",
                        ""id"": ""08818cc4-b6ee-44ab-8985-2402a5a391e1"",
                        ""path"": ""1DAxis"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": """",
                        ""action"": ""Move"",
                        ""isComposite"": true,
                        ""isPartOfComposite"": false
                    },
                    {
                        ""name"": ""negative"",
                        ""id"": ""cbc3f5c8-54da-4d95-9529-bf5fadb70421"",
                        ""path"": ""<Keyboard>/leftArrow"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": """",
                        ""action"": ""Move"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": true
                    },
                    {
                        ""name"": ""positive"",
                        ""id"": ""82ba1336-f4b7-4781-8463-3e6fec66eff2"",
                        ""path"": ""<Keyboard>/rightArrow"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": """",
                        ""action"": ""Move"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": true
                    },
                    {
                        ""name"": ""Keyboard A/D"",
                        ""id"": ""09b0bcc5-a34a-4111-8a4a-2df7a0c9d6a3"",
                        ""path"": ""1DAxis"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": """",
                        ""action"": ""Move"",
                        ""isComposite"": true,
                        ""isPartOfComposite"": false
                    },
                    {
                        ""name"": ""negative"",
                        ""id"": ""01cd3402-3023-420a-9dad-01bfbfcbdc8b"",
                        ""path"": ""<Keyboard>/a"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": """",
                        ""action"": ""Move"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": true
                    },
                    {
                        ""name"": ""positive"",
                        ""id"": ""6aeee9fe-0244-43d2-8d99-7828e8498968"",
                        ""path"": ""<Keyboard>/d"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": """",
                        ""action"": ""Move"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": true
                    },
                    {
                        ""name"": """",
                        ""id"": ""39f25b41-4276-4370-a19d-a5083f3895f4"",
                        ""path"": ""<Keyboard>/space"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": """",
                        ""action"": ""Jump"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": false
                    },
                    {
                        ""name"": """",
                        ""id"": ""16d80ef0-fd5f-423a-b749-3939286ecdc6"",
                        ""path"": ""<Gamepad>/buttonSouth"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": """",
                        ""action"": ""Jump"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": false
                    }
                ]
            }
        ],
        ""controlSchemes"": []
    }");
            // Default
            m_Default = asset.FindActionMap("Default", throwIfNotFound: true);
            m_Default_Move = m_Default.FindAction("Move", throwIfNotFound: true);
            m_Default_Jump = m_Default.FindAction("Jump", throwIfNotFound: true);
        }
    
        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }
    
        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }
    
        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }
    
        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;
    
        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }
    
        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }
    
        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }
    
        public void Enable()
        {
            asset.Enable();
        }
    
        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;
    
        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }
    
        // Default
        private readonly InputActionMap m_Default;
        private IDefaultActions m_DefaultActionsCallbackInterface;
        private readonly InputAction m_Default_Move;
        private readonly InputAction m_Default_Jump;
        public struct DefaultActions
        {
            private @InputActions m_Wrapper;
            public DefaultActions(@InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Default_Move;
            public InputAction @Jump => m_Wrapper.m_Default_Jump;
            public InputActionMap Get() { return m_Wrapper.m_Default; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(DefaultActions set) { return set.Get(); }
            public void SetCallbacks(IDefaultActions instance)
            {
                if (m_Wrapper.m_DefaultActionsCallbackInterface != null)
                {
                    @Move.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnMove;
                    @Jump.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnJump;
                    @Jump.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnJump;
                    @Jump.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnJump;
                }
                m_Wrapper.m_DefaultActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                    @Jump.started += instance.OnJump;
                    @Jump.performed += instance.OnJump;
                    @Jump.canceled += instance.OnJump;
                }
            }
        }
        public DefaultActions @Default => new DefaultActions(this);
        public interface IDefaultActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
        }
    }
    
}
